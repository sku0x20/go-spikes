certificates
https://jamielinux.com/docs/openssl-certificate-authority/sign-server-and-client-certificates.html

with sans support
https://openssl-ca.readthedocs.io/en/latest/sign-server-and-client-certificates.html

go run tls/client/main.go
go run tls/server/main.go

openssl s_client -servername www.example.com -connect localhost:14777 -CAfile tls/root/ca/certs/ca.cert.pem
openssl crl -in crl/intermediate.crl.pem -out crl/intermediate.crl.der -outform DER

https://www.cossacklabs.com/blog/tls-validation-implementing-ocsp-and-crl-in-go/#configuring-ocsp-crl-in-go

==== notes ====

read messages via bufferio and all that.
bufio.NewReader(c).ReadString('\n')
net.Conn.RemoteAddr().String()
strconv.Itoa(random())

i may not even need to load client side key if i use GetClientCertificate instead of Certificates. idk???
it's fine for now.


go tls,
- tls on clientside verify server
need to give ca chain separately to tls library. if it can understand from full chain including server certificate. good then.
only omission allowed is of root, else everything to have to append to the services.myeglu.com full chain, which by itself includes it's own certificate and let's encrypt chain.
need to sign the certificate on regular intervals and concat the chain.
if it didn't work out can go with no intermediate certificate on server side, just use the services.myglu.com certificate. like how hook is using and stuff.

- tls on serverside verify client
verifying with custom ca
getting the common name from the certificate
revocation list


- process distinction
giving user process distinction
one way is to, `echo "user" &>/dev/null && bash -c "usr supplied command"
second way is to name that bash -c process. the process spawned by it will anyway tell the commands.

if let kind of thing in go? i saw it somewhere.